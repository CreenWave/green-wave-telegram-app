
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Progress } from '@/components/ui/progress';
import { Textarea } from '@/components/ui/textarea';
import { ArrowLeft, User, Building2, Factory, ArrowRight, Sparkles } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface FormData {
  name: string;
  email: string;
  phone: string;
  companyName: string;
  industry: string;
  co2Volume: string;
  description: string;
  materials: string;
}

interface QuestionnaireAnswers {
  [key: string]: string | number;
}

const Registration = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [step, setStep] = useState(1);
  const [userType, setUserType] = useState('');
  const [formData, setFormData] = useState<FormData>({
    name: '',
    email: '',
    phone: '',
    companyName: '',
    industry: '',
    co2Volume: '',
    description: '',
    materials: ''
  });
  const [questionnaireAnswers, setQuestionnaireAnswers] = useState<QuestionnaireAnswers>({});
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // Check if user is authenticated
    const checkAuth = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) {
        navigate('/auth');
      }
    };
    checkAuth();
  }, [navigate]);

  const userTypes = [
    {
      id: 'individual',
      title: '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
      icon: User,
      description: '–î–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏',
      gradient: 'from-emerald-400 to-green-500',
      bgPattern: 'bg-gradient-to-br from-emerald-50 to-green-100'
    },
    {
      id: 'company',
      title: '–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è –∏–º–∏–¥–∂–∞',
      icon: Building2,
      description: '–£–ª—É—á—à–µ–Ω–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏–º–∏–¥–∂–∞ –∫–æ–º–ø–∞–Ω–∏–∏',
      gradient: 'from-blue-400 to-cyan-500',
      bgPattern: 'bg-gradient-to-br from-blue-50 to-cyan-100'
    },
    {
      id: 'manufacturer',
      title: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —ç–∫–æ—Ç–æ–≤–∞—Ä–æ–≤',
      icon: Factory,
      description: '–ü—Ä–æ–¥–∞–∂–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥',
      gradient: 'from-purple-400 to-violet-500',
      bgPattern: 'bg-gradient-to-br from-purple-50 to-violet-100'
    }
  ];

  const getQuestions = () => {
    const questions = {
      individual: [
        { q: '–°–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤ –±–µ–Ω–∑–∏–Ω–∞ —Ç—Ä–∞—Ç–∏—Ç–µ –≤ –º–µ—Å—è—Ü?', options: ['0-50', '50-100', '100-200', '200-500', '500+'] },
        { q: '–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º?', options: ['–ö–∞–∂–¥—ã–π –¥–µ–Ω—å', '3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', '–†–µ–¥–∫–æ', '–ù–∏–∫–æ–≥–¥–∞'] },
        { q: '–°–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–≤–∞—Ç—Ç-—á–∞—Å–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –≤ –º–µ—Å—è—Ü?', options: ['0-100', '100-200', '200-400', '400-600', '600+'] },
        { q: '–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã?', options: ['–í—Å–µ–≥–¥–∞', '–ß–∞—Å—Ç–æ', '–ò–Ω–æ–≥–¥–∞', '–†–µ–¥–∫–æ', '–ù–∏–∫–æ–≥–¥–∞'] },
        { q: '–°–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ –ª–∏ –≤—ã –º—É—Å–æ—Ä?', options: ['–í—Å–µ–≥–¥–∞', '–ß–∞—Å—Ç–æ', '–ò–Ω–æ–≥–¥–∞', '–†–µ–¥–∫–æ', '–ù–∏–∫–æ–≥–¥–∞'] },
        { q: '–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –≤ –¥–µ–Ω—å (–ª–∏—Ç—Ä–æ–≤)?', options: ['1-2', '2-3', '3-4', '4-5', '5+'] },
        { q: '–ö–∞–∫ —á–∞—Å—Ç–æ –ª–µ—Ç–∞–µ—Ç–µ –Ω–∞ —Å–∞–º–æ–ª–µ—Ç–∞—Ö –≤ –≥–æ–¥?', options: ['0', '1-2', '3-5', '6-10', '10+'] },
        { q: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏?', options: ['–î–∞, –∞–∫—Ç–∏–≤–Ω–æ', '–ß–∞—Å—Ç–∏—á–Ω–æ', '–ü–ª–∞–Ω–∏—Ä—É—é', '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é', '–ù–µ—Ç'] },
        { q: '–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç–µ –Ω–æ–≤—É—é –æ–¥–µ–∂–¥—É?', options: ['–†–∞–∑ –≤ –≥–æ–¥', '–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –≥–æ–¥', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ'] },
        { q: '–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞—Ö?', options: ['–ê–∫—Ç–∏–≤–Ω–æ', '–ò–Ω–æ–≥–¥–∞', '–†–µ–¥–∫–æ', '–ü–ª–∞–Ω–∏—Ä—É—é', '–ù–µ—Ç'] }
      ],
      company: [
        { q: '–°–∫–æ–ª—å–∫–æ —Ç–æ–Ω–Ω CO‚ÇÇ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ?', options: ['0-10', '10-50', '50-100', '100-500', '500+'] },
        { q: '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞?', options: ['–î–∞, –¥–µ–π—Å—Ç–≤—É—é—â–∞—è', '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', '–ü–ª–∞–Ω–∏—Ä—É–µ–º', '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º', '–ù–µ—Ç'] },
        { q: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º—É—é —ç–Ω–µ—Ä–≥–∏—é?', options: ['100%', '50-99%', '10-49%', '1-9%', '0%'] },
        { q: '–ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç?', options: ['–ï–∂–µ–≥–æ–¥–Ω–æ', '–†–∞–∑ –≤ 2 –≥–æ–¥–∞', '–†–∞–∑ –≤ 5 –ª–µ—Ç', '–ü–ª–∞–Ω–∏—Ä—É–µ–º', '–ù–∏–∫–æ–≥–¥–∞'] },
        { q: '–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤ —É–≥–ª–µ—Ä–æ–¥–Ω–æ–º —Ä—ã–Ω–∫–µ?', options: ['–ê–∫—Ç–∏–≤–Ω–æ', '–ò–∑—É—á–∞–µ–º', '–ü–ª–∞–Ω–∏—Ä—É–µ–º', '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º', '–ù–µ—Ç'] }
      ],
      manufacturer: [
        { q: '–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∞—à–µ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–π?', options: ['90-100%', '70-89%', '50-69%', '10-49%', '0-9%'] },
        { q: '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?', options: ['–í—Å–µ–≥–¥–∞', '–ß–∞—Å—Ç–æ', '–ò–Ω–æ–≥–¥–∞', '–†–µ–¥–∫–æ', '–ù–∏–∫–æ–≥–¥–∞'] },
        { q: '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞?', options: ['–î–∞, –¥–µ–π—Å—Ç–≤—É—é—â–∏–π', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–ª—É—á–µ–Ω–∏—è', '–ü–ª–∞–Ω–∏—Ä—É–µ–º', '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º', '–ù–µ—Ç'] },
        { q: '–ö–∞–∫ —É—Ç–∏–ª–∏–∑–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã?', options: ['–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞', '–ß–∞—Å—Ç–∏—á–Ω–∞—è –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è', '–û–±—ã—á–Ω–∞—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è', '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å'] },
        { q: '–£—á–∞—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —É–≥–ª–µ—Ä–æ–¥–Ω–æ–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç–∏?', options: ['–î–∞, –∞–∫—Ç–∏–≤–Ω–æ', '–ü–ª–∞–Ω–∏—Ä—É–µ–º', '–ò–∑—É—á–∞–µ–º', '–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º', '–ù–µ—Ç'] },
        { q: '–ö–∞–∫—É—é –¥–æ–ª—é —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ?', options: ['80-100%', '60-79%', '40-59%', '20-39%', '0-19%'] },
        { q: '–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –ª–∏ –æ—Ü–µ–Ω–∫—É –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏?', options: ['–î–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞', '–î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö', '–ü–ª–∞–Ω–∏—Ä—É–µ–º', '–ù–µ—Ç'] },
        { q: '–ö–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã?', options: ['–ï–∂–µ–≥–æ–¥–Ω–æ', '–†–∞–∑ –≤ 2 –≥–æ–¥–∞', '–ü–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏', '–†–µ–¥–∫–æ', '–ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º'] }
      ]
    };
    return questions[userType as keyof typeof questions] || [];
  };

  const formatPhoneNumber = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    if (numbers.length <= 11) {
      const match = numbers.match(/^(\d{1,2})(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})$/);
      if (match) {
        return `+${match[1]}${match[2] ? `(${match[2]}` : ''}${match[3] ? `)${match[3]}` : ''}${match[4] ? `-${match[4]}` : ''}${match[5] ? `-${match[5]}` : ''}`;
      }
    }
    return value;
  };

  const handleNext = async () => {
    if (step === 1 && !userType) {
      toast({
        title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        variant: "destructive"
      });
      return;
    }
    
    if (step === 4) {
      // Complete registration
      await saveProfile();
    } else {
      setStep(step + 1);
    }
  };

  const saveProfile = async () => {
    setLoading(true);
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session) throw new Error('No session');

      // Save profile
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .insert({
          user_id: session.user.id,
          user_type: userType,
          name: formData.name,
          email: formData.email,
          phone: formData.phone,
          company_name: formData.companyName,
          industry: formData.industry,
          co2_emissions: formData.co2Volume ? parseFloat(formData.co2Volume) : null,
          product_description: formData.description,
          materials: formData.materials
        })
        .select()
        .single();

      if (profileError) throw profileError;

      // Save questionnaire
      const { error: questionnaireError } = await supabase
        .from('questionnaires')
        .insert({
          profile_id: profile.id,
          answers: questionnaireAnswers
        });

      if (questionnaireError) throw questionnaireError;

      // Initialize GREEN tokens
      const { error: tokensError } = await supabase
        .from('green_tokens')
        .insert({
          profile_id: profile.id,
          amount: 0
        });

      if (tokensError) throw tokensError;

      toast({
        title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
        description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Green Wave",
      });
      
      navigate('/chat');
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    } else {
      navigate('/auth');
    }
  };

  const questions = getQuestions();
  const totalSteps = userType ? 4 : 3;
  const currentQuestionData = questions[currentQuestion];

  const renderStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <Sparkles className="w-12 h-12 text-green-600 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-800 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
              <p className="text-gray-600">–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –æ–ø—ã—Ç</p>
            </div>
            
            <div className="space-y-4">
              {userTypes.map((type) => {
                const IconComponent = type.icon;
                return (
                  <Card 
                    key={type.id}
                    className={`cursor-pointer transition-all duration-300 hover:shadow-xl border-2 ${
                      userType === type.id 
                        ? 'ring-2 ring-green-500 bg-green-50 border-green-200' 
                        : 'border-gray-200 hover:border-green-300'
                    }`}
                    onClick={() => setUserType(type.id)}
                  >
                    <CardContent className="p-6">
                      <div className="flex items-center space-x-4">
                        <div className={`${type.bgPattern} p-4 rounded-2xl`}>
                          <div className={`p-2 rounded-xl bg-gradient-to-r ${type.gradient} text-white`}>
                            <IconComponent className="w-6 h-6" />
                          </div>
                        </div>
                        <div className="flex-1">
                          <h3 className="font-semibold text-lg text-gray-800">{type.title}</h3>
                          <p className="text-gray-600">{type.description}</p>
                        </div>
                        <RadioGroup value={userType} onValueChange={setUserType}>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value={type.id} id={type.id} />
                          </div>
                        </RadioGroup>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <User className="w-12 h-12 text-green-600 mx-auto mb-4" />
              <h2 className="text-2xl font-bold text-gray-800 mb-2">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              <p className="text-gray-600">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ</p>
            </div>

            <div className="space-y-4">
              {userType === 'individual' && (
                <>
                  <div>
                    <Label htmlFor="name">–ò–º—è *</Label>
                    <Input
                      id="name"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      value={formData.name}
                      onChange={(e) => setFormData({...formData, name: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">Email *</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="example@email.com"
                      value={formData.email}
                      onChange={(e) => setFormData({...formData, email: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                    <Input
                      id="phone"
                      placeholder="+XX(XXX)XXX-XX-XX"
                      value={formData.phone}
                      onChange={(e) => setFormData({...formData, phone: formatPhoneNumber(e.target.value)})}
                    />
                  </div>
                </>
              )}

              {userType === 'company' && (
                <>
                  <div>
                    <Label htmlFor="companyName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *</Label>
                    <Input
                      id="companyName"
                      placeholder="–û–û–û '–ó–µ–ª–µ–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è'"
                      value={formData.companyName}
                      onChange={(e) => setFormData({...formData, companyName: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="industry">–û—Ç—Ä–∞—Å–ª—å *</Label>
                    <Input
                      id="industry"
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: IT, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Ç–æ—Ä–≥–æ–≤–ª—è"
                      value={formData.industry}
                      onChange={(e) => setFormData({...formData, industry: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="co2Volume">–û–±—ä—ë–º –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ (—Ç–æ–Ω–Ω—ã –≤ –≥–æ–¥)</Label>
                    <Input
                      id="co2Volume"
                      type="number"
                      placeholder="0"
                      value={formData.co2Volume}
                      onChange={(e) => setFormData({...formData, co2Volume: e.target.value})}
                    />
                  </div>
                </>
              )}

              {userType === 'manufacturer' && (
                <>
                  <div>
                    <Label htmlFor="companyName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ *</Label>
                    <Input
                      id="companyName"
                      placeholder="–û–û–û '–≠–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'"
                      value={formData.companyName}
                      onChange={(e) => setFormData({...formData, companyName: e.target.value})}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ *</Label>
                    <Textarea
                      id="description"
                      placeholder="–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞, —ç–∫–æ-–æ–¥–µ–∂–¥–∞..."
                      value={formData.description}
                      onChange={(e) => setFormData({...formData, description: e.target.value})}
                      rows={3}
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="materials">–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã *</Label>
                    <Input
                      id="materials"
                      placeholder="–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ö–ª–æ–ø–æ–∫, –±–∞–º–±—É–∫..."
                      value={formData.materials}
                      onChange={(e) => setFormData({...formData, materials: e.target.value})}
                      required
                    />
                  </div>
                </>
              )}
            </div>
          </div>
        );

      case 3:
        if (!currentQuestionData) return null;
        
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <div className="w-12 h-12 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-white font-bold">{currentQuestion + 1}</span>
              </div>
              <h2 className="text-2xl font-bold text-gray-800 mb-2">–ê–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
              <p className="text-gray-600">–í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}</p>
            </div>

            <div className="bg-gradient-to-r from-purple-50 to-pink-50 p-6 rounded-2xl">
              <h3 className="text-lg font-semibold text-gray-800 mb-6 text-center">
                {currentQuestionData.q}
              </h3>
              
              <RadioGroup 
                value={questionnaireAnswers[currentQuestion]?.toString()} 
                onValueChange={(value) => setQuestionnaireAnswers({
                  ...questionnaireAnswers,
                  [currentQuestion]: value
                })}
                className="space-y-3"
              >
                {currentQuestionData.options.map((option, index) => (
                  <div key={index} className="flex items-center space-x-3 p-3 rounded-lg hover:bg-white/50 transition-colors">
                    <RadioGroupItem value={option} id={`option-${index}`} />
                    <Label htmlFor={`option-${index}`} className="flex-1 cursor-pointer">
                      {option}
                    </Label>
                  </div>
                ))}
              </RadioGroup>
            </div>

            <div className="flex justify-between">
              <Button 
                variant="outline" 
                onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
                disabled={currentQuestion === 0}
              >
                –ù–∞–∑–∞–¥
              </Button>
              <Button 
                onClick={() => {
                  if (currentQuestion < questions.length - 1) {
                    setCurrentQuestion(currentQuestion + 1);
                  } else {
                    setStep(4);
                  }
                }}
                disabled={!questionnaireAnswers[currentQuestion]}
                className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
              >
                {currentQuestion < questions.length - 1 ? '–î–∞–ª–µ–µ' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å'}
              </Button>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <div className="w-16 h-16 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Sparkles className="w-8 h-8 text-white" />
              </div>
              <h2 className="text-2xl font-bold text-gray-800 mb-2">–í—Å–µ –≥–æ—Ç–æ–≤–æ! üéâ</h2>
              <p className="text-gray-600">–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</p>
            </div>

            <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-2xl border border-green-200">
              <h3 className="font-semibold text-lg mb-4 text-green-800">–ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
              <ul className="space-y-3 text-green-700">
                <li className="flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-3"></div>
                  –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò Grok
                </li>
                <li className="flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-3"></div>
                  –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –∫–∞—Ä–±–æ–Ω–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                </li>
                <li className="flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-3"></div>
                  –¢–æ—Ä–≥—É–π—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã GREEN
                </li>
                <li className="flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-3"></div>
                  –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö –∏ –ø–æ–ª—É—á–∞–π—Ç–µ NFT –Ω–∞–≥—Ä–∞–¥—ã
                </li>
              </ul>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 via-green-50 to-teal-50">
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <Button variant="ghost" onClick={handleBack} className="text-green-600 hover:text-green-700 hover:bg-green-100">
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥
          </Button>
          <div className="text-sm text-gray-500">
            –®–∞–≥ {step} –∏–∑ {totalSteps}
          </div>
        </div>

        {/* Progress */}
        <div className="mb-8">
          <Progress value={(step / totalSteps) * 100} className="h-3" />
        </div>

        {/* Content */}
        <Card className="border-0 shadow-2xl bg-white/80 backdrop-blur-sm">
          <CardContent className="p-8">
            {renderStepContent()}
            
            <div className="flex justify-end mt-8">
              <Button 
                onClick={handleNext}
                disabled={loading}
                className="bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white border-0 shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300 px-8"
              >
                {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : step === totalSteps ? '–ù–∞—á–∞—Ç—å' : '–î–∞–ª–µ–µ'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Registration;
