
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Progress } from '@/components/ui/progress';
import { ArrowLeft, User, Building2, Factory, ArrowRight } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const Registration = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [step, setStep] = useState(1);
  const [userType, setUserType] = useState('');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    companyName: '',
    industry: '',
    co2Volume: '',
    description: '',
    materials: ''
  });

  const userTypes = [
    {
      id: 'individual',
      title: '–ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ',
      icon: User,
      description: '–î–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      color: 'from-green-400 to-emerald-500'
    },
    {
      id: 'company',
      title: '–ö–æ–º–ø–∞–Ω–∏—è –¥–ª—è –∏–º–∏–¥–∂–∞',
      icon: Building2,
      description: '–£–ª—É—á—à–µ–Ω–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∏–º–∏–¥–∂–∞',
      color: 'from-emerald-400 to-teal-500'
    },
    {
      id: 'producer',
      title: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —ç–∫–æ—Ç–æ–≤–∞—Ä–æ–≤',
      icon: Factory,
      description: '–ü—Ä–æ–¥–∞–∂–∞ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
      color: 'from-teal-400 to-cyan-500'
    }
  ];

  const handleNext = () => {
    if (step === 1 && !userType) {
      toast({
        title: "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
        variant: "destructive"
      });
      return;
    }
    
    if (step < 3) {
      setStep(step + 1);
    } else {
      // Complete registration
      toast({
        title: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ",
        description: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Green Wave",
      });
      navigate('/chat');
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    } else {
      navigate('/');
    }
  };

  const formatPhoneNumber = (value: string) => {
    const numbers = value.replace(/\D/g, '');
    const match = numbers.match(/^(\d{1,2})(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})$/);
    if (match) {
      return `+${match[1]}${match[2] ? `(${match[2]}` : ''}${match[3] ? `)${match[3]}` : ''}${match[4] ? `-${match[4]}` : ''}${match[5] ? `-${match[5]}` : ''}`;
    }
    return value;
  };

  const renderStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
              <p className="text-gray-600">–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –æ–ø—ã—Ç</p>
            </div>
            
            <div className="space-y-4">
              {userTypes.map((type) => {
                const IconComponent = type.icon;
                return (
                  <Card 
                    key={type.id}
                    className={`cursor-pointer transition-all duration-300 hover:shadow-lg ${
                      userType === type.id ? 'ring-2 ring-green-500 bg-green-50' : ''
                    }`}
                    onClick={() => setUserType(type.id)}
                  >
                    <CardContent className="p-6">
                      <div className="flex items-center space-x-4">
                        <div className={`p-3 rounded-xl bg-gradient-to-r ${type.color} text-white`}>
                          <IconComponent className="w-6 h-6" />
                        </div>
                        <div className="flex-1">
                          <h3 className="font-semibold text-lg">{type.title}</h3>
                          <p className="text-gray-600">{type.description}</p>
                        </div>
                        <RadioGroup value={userType} onValueChange={setUserType}>
                          <div className="flex items-center space-x-2">
                            <RadioGroupItem value={type.id} id={type.id} />
                          </div>
                        </RadioGroup>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              <p className="text-gray-600">–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ</p>
            </div>

            <div className="space-y-4">
              {userType === 'individual' && (
                <>
                  <div>
                    <Label htmlFor="name">–ò–º—è</Label>
                    <Input
                      id="name"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      value={formData.name}
                      onChange={(e) => setFormData({...formData, name: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="email">Email</Label>
                    <Input
                      id="email"
                      type="email"
                      placeholder="example@email.com"
                      value={formData.email}
                      onChange={(e) => setFormData({...formData, email: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                    <Input
                      id="phone"
                      placeholder="+XX(XXX)XXX-XX-XX"
                      value={formData.phone}
                      onChange={(e) => setFormData({...formData, phone: formatPhoneNumber(e.target.value)})}
                    />
                  </div>
                </>
              )}

              {userType === 'company' && (
                <>
                  <div>
                    <Label htmlFor="companyName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</Label>
                    <Input
                      id="companyName"
                      placeholder="–û–û–û '–ó–µ–ª–µ–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è'"
                      value={formData.companyName}
                      onChange={(e) => setFormData({...formData, companyName: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="industry">–û—Ç—Ä–∞—Å–ª—å</Label>
                    <Input
                      id="industry"
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: IT, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, —Ç–æ—Ä–≥–æ–≤–ª—è"
                      value={formData.industry}
                      onChange={(e) => setFormData({...formData, industry: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="co2Volume">–û–±—ä—ë–º –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ (—Ç–æ–Ω–Ω—ã –≤ –≥–æ–¥)</Label>
                    <Input
                      id="co2Volume"
                      type="number"
                      placeholder="0"
                      value={formData.co2Volume}
                      onChange={(e) => setFormData({...formData, co2Volume: e.target.value})}
                    />
                  </div>
                </>
              )}

              {userType === 'producer' && (
                <>
                  <div>
                    <Label htmlFor="companyName">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏</Label>
                    <Input
                      id="companyName"
                      placeholder="–û–û–û '–≠–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'"
                      value={formData.companyName}
                      onChange={(e) => setFormData({...formData, companyName: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</Label>
                    <Input
                      id="description"
                      placeholder="–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞, —ç–∫–æ-–æ–¥–µ–∂–¥–∞..."
                      value={formData.description}
                      onChange={(e) => setFormData({...formData, description: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="materials">–û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</Label>
                    <Input
                      id="materials"
                      placeholder="–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–π —Ö–ª–æ–ø–æ–∫, –±–∞–º–±—É–∫..."
                      value={formData.materials}
                      onChange={(e) => setFormData({...formData, materials: e.target.value})}
                    />
                  </div>
                </>
              )}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-800 mb-2">–ì–æ—Ç–æ–≤–æ! üéâ</h2>
              <p className="text-gray-600">–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–∞—á–Ω–µ–º —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ</p>
            </div>

            <div className="bg-gradient-to-r from-green-50 to-emerald-50 p-6 rounded-2xl border border-green-200">
              <h3 className="font-semibold text-lg mb-4 text-green-800">–ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
              <ul className="space-y-3 text-green-700">
                <li className="flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-3"></div>
                  –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –æ—Ç –ò–ò
                </li>
                <li className="flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-3"></div>
                  –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞—Ä–±–æ–Ω–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                </li>
                <li className="flex items-center">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-3"></div>
                  –¢–æ—Ä–≥—É–π—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã GREEN
                </li>
              </ul>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50">
      <div className="container mx-auto px-4 py-8 max-w-2xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <Button variant="ghost" onClick={handleBack} className="text-green-600 hover:text-green-700">
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ù–∞–∑–∞–¥
          </Button>
          <div className="text-sm text-gray-500">
            –®–∞–≥ {step} –∏–∑ 3
          </div>
        </div>

        {/* Progress */}
        <div className="mb-8">
          <Progress value={(step / 3) * 100} className="h-2" />
        </div>

        {/* Content */}
        <Card className="border-0 shadow-xl">
          <CardContent className="p-8">
            {renderStepContent()}
            
            <div className="flex justify-end mt-8">
              <Button 
                onClick={handleNext}
                className="eco-gradient text-white border-0 hover:shadow-lg hover:scale-105 transition-all duration-300 px-8"
              >
                {step === 3 ? '–ù–∞—á–∞—Ç—å' : '–î–∞–ª–µ–µ'}
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Registration;
