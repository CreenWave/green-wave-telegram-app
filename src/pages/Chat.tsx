
import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { ArrowLeft, Send, Bot, User, Camera, MapPin, Award, Leaf } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Message {
  id: string;
  type: 'user' | 'ai';
  content: string;
  timestamp: Date;
  actions?: Array<{
    type: 'confirm' | 'photo' | 'location';
    label: string;
    reward?: string;
  }>;
}

const Chat = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'ai',
      content: '–ü—Ä–∏–≤–µ—Ç! üå± –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ Green Wave. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –≤–µ—Å—Ç–∏ –±–æ–ª–µ–µ —ç–∫–æ–ª–æ–≥–∏—á–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞—Ä–±–æ–Ω–æ–≤—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã!',
      timestamp: new Date(),
    },
    {
      id: '2',
      type: 'ai',
      content: 'üöå –°–æ–≤–µ—Ç –¥–Ω—è: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç 2 —Ä–∞–∑–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –≤–º–µ—Å—Ç–æ –ª–∏—á–Ω–æ–≥–æ –∞–≤—Ç–æ. –≠—Ç–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç –æ–∫–æ–ª–æ 10 –∫–≥ CO‚ÇÇ!',
      timestamp: new Date(),
      actions: [
        { type: 'confirm', label: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–µ–∑–¥–∫—É', reward: '10 –∫–≥ CO‚ÇÇ' },
        { type: 'photo', label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ üì∏', reward: '10 –∫–≥ CO‚ÇÇ' },
        { type: 'location', label: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π üìç', reward: '10 –∫–≥ CO‚ÇÇ' }
      ]
    }
  ]);
  
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [earnedCertificates, setEarnedCertificates] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'ai',
        content: generateAIResponse(inputValue),
        timestamp: new Date(),
        actions: Math.random() > 0.5 ? [
          { type: 'confirm', label: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ', reward: '5 –∫–≥ CO‚ÇÇ' },
          { type: 'photo', label: '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ', reward: '5 –∫–≥ CO‚ÇÇ' }
        ] : undefined
      };
      
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const generateAIResponse = (input: string): string => {
    const responses = [
      'üåø –û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –±–æ–ª–µ–µ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ...',
      '‚ôªÔ∏è –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã CO‚ÇÇ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫–∂–µ...',
      'üå± –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ –∫ —É—Å—Ç–æ–π—á–∏–≤–æ–º—É –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏.',
      'üö¥‚Äç‚ôÇÔ∏è –ü—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –∫ —ç—Ç–æ–º—É –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ 2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.',
      'üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í–æ—Ç —á—Ç–æ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏...',
      'üåç –ö–∞–∂–¥–æ–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø–ª–∞–Ω–µ—Ç—ã! –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –µ—â–µ –æ–¥–∏–Ω —à–∞–≥...'
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  };

  const handleAction = (action: { type: string; label: string; reward?: string }) => {
    switch (action.type) {
      case 'confirm':
        toast({
          title: "–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! üéâ",
          description: `–í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ ${action.reward}`,
        });
        setEarnedCertificates(prev => prev + 1);
        break;
      case 'photo':
        toast({
          title: "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... üì∏",
          description: "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–µ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        });
        break;
      case 'location':
        toast({
          title: "–õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! üìç",
          description: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ ${action.reward} –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω`,
        });
        setEarnedCertificates(prev => prev + 1);
        break;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 via-emerald-50 to-teal-50">
      {/* Header */}
      <header className="bg-white border-b border-green-100 sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button variant="ghost" onClick={() => navigate('/')} className="text-green-600">
                <ArrowLeft className="w-4 h-4 mr-2" />
                –ì–ª–∞–≤–Ω–∞—è
              </Button>
              <div className="flex items-center space-x-2">
                <div className="w-8 h-8 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center">
                  <Bot className="w-5 h-5 text-white" />
                </div>
                <div>
                  <h1 className="font-semibold text-gray-800">–ò–ò –ü–æ–º–æ—â–Ω–∏–∫</h1>
                  <p className="text-xs text-green-600">–æ–Ω–ª–∞–π–Ω</p>
                </div>
              </div>
            </div>
            
            <Badge variant="outline" className="border-green-200 text-green-700">
              <Award className="w-3 h-3 mr-1" />
              {earnedCertificates} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            </Badge>
          </div>
        </div>
      </header>

      {/* Messages */}
      <div className="container mx-auto px-4 py-6 max-w-4xl">
        <div className="space-y-6 mb-6">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div className={`flex items-start space-x-3 max-w-[80%] ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                  message.type === 'user' 
                    ? 'bg-gradient-to-r from-blue-400 to-blue-500' 
                    : 'bg-gradient-to-r from-green-400 to-emerald-500'
                }`}>
                  {message.type === 'user' ? (
                    <User className="w-4 h-4 text-white" />
                  ) : (
                    <Bot className="w-4 h-4 text-white" />
                  )}
                </div>
                
                <div className={`rounded-2xl px-4 py-3 ${
                  message.type === 'user'
                    ? 'bg-blue-500 text-white'
                    : 'bg-white border border-green-100 text-gray-800'
                }`}>
                  <p className="whitespace-pre-wrap">{message.content}</p>
                  
                  {message.actions && (
                    <div className="mt-3 space-y-2">
                      {message.actions.map((action, index) => (
                        <Button
                          key={index}
                          variant="outline"
                          size="sm"
                          className="w-full justify-between border-green-200 hover:bg-green-50 text-green-700"
                          onClick={() => handleAction(action)}
                        >
                          <span className="flex items-center">
                            {action.type === 'photo' && <Camera className="w-3 h-3 mr-2" />}
                            {action.type === 'location' && <MapPin className="w-3 h-3 mr-2" />}
                            {action.type === 'confirm' && <Leaf className="w-3 h-3 mr-2" />}
                            {action.label}
                          </span>
                          {action.reward && (
                            <Badge variant="secondary" className="text-xs bg-green-100 text-green-800">
                              {action.reward}
                            </Badge>
                          )}
                        </Button>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="flex justify-start">
              <div className="flex items-start space-x-3">
                <div className="w-8 h-8 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center">
                  <Bot className="w-4 h-4 text-white" />
                </div>
                <div className="bg-white border border-green-100 rounded-2xl px-4 py-3">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-green-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-green-100 p-4">
        <div className="container mx-auto max-w-4xl">
          <div className="flex space-x-4">
            <Input
              placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —Å–æ–≤–µ—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏..."
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              className="flex-1"
            />
            <Button 
              onClick={handleSendMessage}
              disabled={!inputValue.trim() || isTyping}
              className="eco-gradient text-white border-0 hover:shadow-lg transition-all duration-300"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;
